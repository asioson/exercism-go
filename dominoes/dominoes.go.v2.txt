// package dominoes implements routines to generate a Domino chain given
// a set of Dominoes
package dominoes

type Domino [2]int

// I implemented an ad hoc structure using a slice of 3 elements.
// I probably have to implement the structure using struct to make
// the solution more elegant.  As of now, this will do. :-D
const PS = 0 // position
const LK = 1 // link
const SZ = 2 // size

// NextCandidate generates information about the next possible Dominoes given
// partial solution
func NextCandidates(input []Domino, soln [][2]int, k int) [][2]int {
	cand := [][2]int{}
	for i, d := range input {
		found := false
		for _, v := range soln {
			if v[PS] == i {
				found = true
				break
			}
		}
		if !found {
			last := input[soln[k-1][PS]]
			if last[soln[k-1][LK]] == d[0] {
				cand = append(cand, [2]int{i, 1})
			} else if last[soln[k-1][LK]] == d[1] {
				cand = append(cand, [2]int{i, 0})
			}
		}
	}
	return cand
}

// Solve determines an Eulerian path given the slice of Dominoes
// using backtracking approach
func Solve(input []Domino) ([][2]int, bool) {
	n := len(input)
	soln := [][2]int{}
	stack := [][3]int{{0, 1, 1}}
	for len(stack) > 0 {
		item := stack[0]
		stack = stack[1:]
		pos, link, k := item[PS], item[LK], item[SZ]
		soln = append(soln[:k-1], [2]int{pos, link})
		if k == n {
			return soln, true
		} else {
			for _, c := range NextCandidates(input, soln, k) {
				stack = append([][3]int{{c[PS], c[LK], k + 1}}, stack...)
			}
		}
	}
	return soln, false
}

// MakeChain produces a Domino chain (Euler circuit) when possible
func MakeChain(input []Domino) ([]Domino, bool) {
	chain := []Domino{}
	n := len(input)
	if n == 0 {
		return chain, true
	}
	if sequence, ok := Solve(input); ok {
		for _, s := range sequence {
			chain = append(chain, Domino{input[s[PS]][1-s[LK]], input[s[PS]][s[LK]]})
		}
		if chain[0][0] == chain[n-1][1] {
			return chain, true
		}
	}
	return chain, false
}
